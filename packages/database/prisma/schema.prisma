generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider          = "mysql"
  url               = env("PROD_DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model User {
  id             String          @id @default(uuid()) @map("_id")
  username       String?         @unique
  mainWallet     String          @unique
  email          String?
  profileNft     Json?
  userSybil      UserSybilStatus @default(NONE)
  profilePicture String?         @db.VarChar(500)
  tx             String?         @db.VarChar(500)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  isActive       Boolean         @default(true)
  isArchive      Boolean         @default(false)
  Session        Session[]
  Comments       Comments[]
  Reply          Reply[]
  Round          Round[]
  Contribution   Contribution[]
  Team           Team[]
  Proof          Proof[]
  Project        Project[]

  @@fulltext([username])
}

model Proof {
  id        String    @id @default(uuid()) @map("_id")
  userId    String
  proofType ProofType
  proofInfo Json
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(true)
  isArchive Boolean   @default(false)
  User      User      @relation(fields: [userId], references: [id])
  Project   Project   @relation(fields: [projectId], references: [id])
  projectId String

  @@index([userId])
  @@index([projectId])
}

model Session {
  id        String   @id @default(uuid())
  ipAddress String
  userAgent String
  createdAt DateTime @default(now())
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Project {
  id                   String                 @id @default(uuid()) @map("_id")
  name                 String
  shortDescription     String                 @db.VarChar(2000)
  logo                 String                 @db.VarChar(1000)
  ownerPublickey       String
  tx                   String                 @default("")
  longDescription      String                 @db.Text
  industry             String                 @db.VarChar(2000)
  projectLink          String                 @default("")
  twitterHandle        String                 @default("")
  githubLink           String                 @default("")
  discordLink          String                 @default("")
  telegramLink         String                 @default("")
  projectUserCount     Int                    @default(0)
  status               ProjectVerifyStatus    @default(REVIEW)
  failedReason         String?                @default("")
  mutliSigAddress      String?                @default("")
  email                String                 @default("")
  ogImage              String                 @default("")
  createKey            String?                @default("")
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  isActive             Boolean                @default(true)
  isArchive            Boolean                @default(false)
  Owner                User                   @relation(fields: [ownerPublickey], references: [mainWallet])
  Comments             Comments[]
  ProjectJoinRound     ProjectJoinRound[]
  Contribution         Contribution[]
  Team                 Team[]
  ProjectJoinHackathon ProjectJoinHackathon[]
  Proof                Proof[]

  @@index([ownerPublickey])
}

model Round {
  id                    String             @id @default(uuid()) @map("_id")
  name                  String
  matchedPool           Float              @default(0)
  notionPage            String             @db.VarChar(500)
  projectCount          Int                @default(0)
  userId                String
  description           String             @db.Text
  endTime               DateTime           @default(now())
  startTime             DateTime           @default(now())
  registrationEndDate   DateTime           @default(now())
  registrationStartDate DateTime           @default(now())
  tx                    String             @db.VarChar(500)
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  colorScheme           String             @default("teal")
  shortDescription      String             @default("") @db.VarChar(2000)
  contributions         Float              @default(0)
  manager               String             @default("")
  isActive              Boolean            @default(true)
  isArchive             Boolean            @default(false)
  User                  User               @relation(fields: [userId], references: [id])
  Sponsor               Sponsor[]
  ProjectJoinRound      ProjectJoinRound[]
  Contribution          Contribution[]

  @@index([userId])
}

model Sponsor {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  logo      String   @db.VarChar(500)
  roundId   String
  tx        String   @db.VarChar(500)
  isActive  Boolean  @default(true)
  isArchive Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Round     Round    @relation(fields: [roundId], references: [id])

  @@index([roundId])
}

model ProjectJoinRound {
  id            String                 @id @default(uuid()) @map("_id")
  projectId     String
  tx            String                 @db.VarChar(500)
  roundId       String
  status        ProjectJoinRoundStatus @default(PENDING)
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  amountRaise   Float?                 @default(0)
  contributions Int                    @default(0)
  isArchive     Boolean                @default(false)
  Project       Project                @relation(fields: [projectId], references: [id])
  Round         Round                  @relation(fields: [roundId], references: [id])
  Contribution  Contribution[]

  @@index([projectId])
  @@index([roundId])
}

model Team {
  id          String     @id @default(uuid()) @map("_id")
  userId      String
  projectId   String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isActive    Boolean    @default(true)
  isArchive   Boolean    @default(false)
  hackathonId String?
  user        User       @relation(fields: [userId], references: [id])
  Project     Project?   @relation(fields: [projectId], references: [id])
  Hackathon   Hackathon? @relation(fields: [hackathonId], references: [id])

  @@index([projectId])
  @@index([userId])
  @@index([hackathonId])
}

model Hackathon {
  id                   String                 @id @default(uuid()) @map("_id")
  name                 String
  logo                 String                 @db.VarChar(500)
  background           String                 @db.VarChar(500)
  shortDescription     String                 @db.VarChar(2000)
  longDescription      String                 @db.Text
  prizePool            Int                    @default(0)
  host                 Json?
  track                Json?
  timeline             Json?
  social               Json?
  slug                 String                 @unique
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  isActive             Boolean                @default(true)
  isArchive            Boolean                @default(false)
  contribution         Contribution[]
  ProjectJoinHackathon ProjectJoinHackathon[]
  Team                 Team[]
}

model ProjectJoinHackathon {
  id           String         @id @default(uuid()) @map("_id")
  hackathonId  String
  projectId    String
  tracks       Json?
  mainTrack    String?
  amount       Float          @default(0)
  isArchive    Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  tx           String         @db.VarChar(500)
  Hackathon    Hackathon      @relation(fields: [hackathonId], references: [id])
  Project      Project        @relation(fields: [projectId], references: [id])
  Contribution Contribution[]

  @@index([hackathonId])
  @@index([projectId])
}

model Contribution {
  id                     String                @id @default(uuid()) @map("_id")
  tx                     String                @db.VarChar(500)
  token                  String
  split                  Float
  projectJoinRoundId     String?
  projectJoinHackathonId String?
  roundId                String?
  hackathonId            String?
  projectId              String
  userId                 String
  totalAmount            Float
  totalUsdAmount         Float
  isIncluded             Boolean               @default(false)
  isArchive              Boolean               @default(false)
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  User                   User                  @relation(fields: [userId], references: [id])
  Project                Project               @relation(fields: [projectId], references: [id])
  Round                  Round?                @relation(fields: [roundId], references: [id])
  Hackathon              Hackathon?            @relation(fields: [hackathonId], references: [id])
  ProjectJoinRound       ProjectJoinRound?     @relation(fields: [projectJoinRoundId], references: [id])
  ProjectJoinHackathon   ProjectJoinHackathon? @relation(fields: [projectJoinHackathonId], references: [id])

  @@index([projectId])
  @@index([roundId])
  @@index([userId])
  @@index([projectJoinRoundId])
  @@index([hackathonId])
  @@index([projectJoinHackathonId])
}

model Comments {
  id        String   @id @default(uuid()) @map("_id")
  comment   String   @db.Text
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isArchive Boolean  @default(false)
  reactions Json
  projectId String
  Reply     Reply[]
  User      User     @relation(fields: [userId], references: [id])
  Project   Project  @relation(fields: [projectId], references: [id])

  @@index([userId])
  @@index([projectId])
}

model Reply {
  id          String    @id @default(uuid()) @map("_id")
  reply       String    @db.Text
  commentId   String
  replyUserId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comment     Comments? @relation(fields: [commentId], references: [id])
  user        User      @relation(fields: [replyUserId], references: [id])

  @@index([commentId])
  @@index([replyUserId])
}

enum UserSybilStatus {
  NONE
  NEW_WALLET
  DEAD_WALLET
  ELUSIVE_WALLET
  CEX_WALLET
  CONFIRMED
}

enum ProofType {
  SUPERTEAM
  GITHUB
  TWITTER
  CIVIC
  CUBIK_POAPS
  CUBIK_PARTICIPANT
  CUBIK_TEAM
  SNS_DOMAIN
  DISCORD
  SOL_POSSION
  BLUE_CHIP_HOLDER
  DEFI_INTERACTION
}

enum ProjectVerifyStatus {
  REVIEW
  VERIFIED
  FAILED
}

enum ProjectJoinRoundStatus {
  PENDING
  APPROVED
  REJECTED
}
