// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model UserModel {
  id               String            @id @default(uuid()) @map("_id")
  username         String            @unique
  mainWallet       String            @unique
  profilePicture   String            @db.VarChar(500)
  tx               String            @db.VarChar(500)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userDetailsModel UserDetailsModel?
  Session          Session[]
  project          ProjectsModel[]
}

model Session {
  id           String    @id @default(uuid())
  sessionToken String    @unique
  userId       String
  expires      DateTime
  user         UserModel @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserDetailsModel {
  id             String    @id @default(uuid()) @map("_id")
  firstName      String?
  lastName       String?
  bio            String?   @db.VarChar(1000)
  email          String?
  website        String?
  twitterHandle  String?
  githubHandle   String?
  linkedinUrl    String?
  telegramHandle String?
  userModelId    String    @unique
  user           UserModel @relation(fields: [userModelId], references: [id])

  @@index([userModelId])
}

model PojectJoinRound {
  id           String                 @id @default(uuid()) @map("_id")
  projectId    String
  tx           String                 @db.VarChar(500)
  roundId      String
  status       ProjectJoinRoundStatus @default(pending)
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  project      ProjectsModel          @relation(fields: [projectId], references: [id])
  fundingRound Round                  @relation(fields: [roundId], references: [id])

  @@index([projectId])
  @@index([roundId])
}

enum ProjectJoinRoundStatus {
  pending
  approved
  rejected
}

model ProjectsModel {
  id                String              @id @default(uuid()) @map("_id")
  name              String
  short_description String              @db.VarChar(2000)
  logo              String              @db.VarChar(1000)
  owner_publickey   String
  long_description  String              @db.VarChar(5000)
  industry          String
  project_link      String              @default("")
  twitter_handle    String              @default("")
  github_link       String              @default("")
  discord_link      String              @default("")
  telegram_link     String              @default("")
  projectUserCount  Int                 @default(0)
  status            ProjectVerifyStatus @default(review)
  failedReason      String?             @default("")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  owner             UserModel           @relation(fields: [owner_publickey], references: [mainWallet])
  PojectJoinRound   PojectJoinRound[]

  @@index([owner_publickey])
}

enum ProjectVerifyStatus {
  review
  verified
  failed
}

model Round {
  id                     String            @id @default(uuid()) @map("_id")
  roundNumber            Int
  roundName              String
  matchedPool            Float
  communityContributions Float
  active                 Boolean           @default(true)
  roundDetailsId         String            @unique
  roundDetails           RoundDetails      @relation(fields: [roundDetailsId], references: [id])
  PojectJoinRound        PojectJoinRound[]
  tx                     String            @db.VarChar(500)

  @@index([roundDetailsId])
}

model RoundDetails {
  id           String @id @default(uuid()) @map("_id")
  FundingRound Round?
}

model Contribution {
  id     String @id @default(uuid()) @map("_id")
  amount Float
  tx     String @db.VarChar(500)
  token  String
  split  Float
}
